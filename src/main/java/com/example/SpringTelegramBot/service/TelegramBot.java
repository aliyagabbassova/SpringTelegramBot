package com.example.SpringTelegramBot.service;

import com.example.SpringTelegramBot.config.BotConfig;
import com.example.SpringTelegramBot.entity.User;
import com.vdurmont.emoji.EmojiParser;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.Timestamp;
import java.util.*;

@Slf4j
@Component
@AllArgsConstructor
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig config;
    private final UserService userService;
    static final String HELP_TEXT = "This bot is created to demonstrate Spring capabilities.\n\n" +
            "You can execute commands from the main menu on the left or by typing a command \n\n" +
            "Type /start to see a welcome message \n\n" +
            "Type /mydata to see data stored about yourself \n\n" +
            "Type /help to see this help message";
    private final Map<Long, String> userStates = new HashMap<>();

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    public void onUpdateReceived(Update update) {
        if (update != null && update.hasMessage()) {
            Message message = update.getMessage();
            Long telegramId = message.getFrom().getId();
            String text = message.getText();


            if (telegramId == null) {
                log.error("–û—à–∏–±–∫–∞: telegramId is null");
                return;
            }

            // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
            if (message.hasContact()) {
                String phoneNumber = message.getContact().getPhoneNumber();
                userService.savePhoneNumber(telegramId, phoneNumber);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ
                sendMessage(telegramId, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: " + phoneNumber + ". –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞");
                return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            }

            if (update.hasMessage() && update.getMessage().hasText()) {
//                String text = update.getMessage().getText();
                Long chatId = update.getMessage().getChatId();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                if (text == null || text.trim().isEmpty()) {
                    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
                }

                SendMessage sendMessage = new SendMessage(chatId.toString(), text);
                try {
                    execute(sendMessage);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }

            if (update.hasMessage() && update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();
                Long chatId = update.getMessage().getChatId();

                if (messageText != null && !messageText.isEmpty()) {
                    SendMessage sendMessage = new SendMessage(String.valueOf(chatId), messageText);
                    try {
                        execute(sendMessage);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                } else {
                    System.out.println("–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ update.getMessage().getText(), messageText = " + messageText);
                }
            }

            if (message.hasText()) {

                if ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞".equals(text)) {
//                    sendMessage(telegramId, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞");
                    userStates.put(telegramId, "AWAITING_ACCOUNT_NUMBER"); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
                log.info("User state for {}: {}", telegramId, userStates.get(telegramId));
                if ("AWAITING_ACCOUNT_NUMBER".equals(userStates.get(telegramId))) {
                    if (text.matches("\\d+")) {
                        Integer personalAccount = Integer.valueOf(text);
                        userService.savePersonalAccount(telegramId, personalAccount);

                        sendMessage(telegramId, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + personalAccount);
                        userStates.remove(telegramId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    } else {
                        sendMessage(telegramId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.");
                    }
                    return;
                }
                if ("AWAITING_METER_READING".equals(userStates.get(telegramId))) {
                    if (text.matches("\\d+")) {
                        Integer newReading = Integer.valueOf(text);
                        userService.saveMeterReading(telegramId, newReading);
                        sendMessage(telegramId, "‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: " + newReading);
                        userStates.remove(telegramId);
                    } else {
                        sendMessage(telegramId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.");
                    }
                    return;
                }
            }
            if (update.hasMessage() && update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();

                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(String.valueOf(telegramId));


                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
                keyboardMarkup.setResizeKeyboard(true);
                keyboardMarkup.setOneTimeKeyboard(true);

                List<KeyboardRow> keyboard = new ArrayList<>();

                keyboardMarkup.setKeyboard(keyboard);
                sendMessage.setReplyMarkup(keyboardMarkup);

                try {
                    execute(sendMessage);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }

            // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç
            if (message.hasText()) {
                String messageText = message.getText();
                String firstName = message.getChat().getFirstName();
                String lastName = message.getChat().getLastName();

                User user = new User();
                user.setTelegramId(telegramId);
                user.setFirstName(firstName);
                user.setLastName(lastName);
                user.setUserName(message.getFrom().getUserName());
                user.setRegisteredAt(new Timestamp(System.currentTimeMillis()));

                switch (messageText) {
                    case "/start":
                        userService.registerOrUpdateUser(user);
                        String answer = EmojiParser.parseToUnicode(
                                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + firstName + " :blush:! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ê–ª–º–∞—Ç—ã –°—É. " +
                                        "–î–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /phone"
                        );
                        sendMessage(telegramId, answer);
                        break;

                    case "/mydata":
                        userService.getUserByTelegramId(telegramId).ifPresentOrElse(
                                userData -> {
                                    String userInfo = "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" +
                                            "–ò–º—è: " + userData.getFirstName() + "\n" +
                                            "–§–∞–º–∏–ª–∏—è: " + (userData.getLastName() != null ? userData.getLastName() : "–ù–µ —É–∫–∞–∑–∞–Ω–∞") + "\n" +
                                            "Username: " + (userData.getUserName() != null ? userData.getUserName() : "–ù–µ —É–∫–∞–∑–∞–Ω") + "\n" +
                                            "–¢–µ–ª–µ—Ñ–æ–Ω: " + (userData.getPhoneNumber() != null ? userData.getPhoneNumber() : "–ù–µ —É–∫–∞–∑–∞–Ω") + "\n" +
                                            "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + userData.getRegisteredAt();
                                    sendMessage(telegramId, userInfo);
                                },
                                () -> sendMessage(telegramId, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                        );
                        break;

                    case "/deletedata":
                        boolean deleted = userService.deleteUserByTelegramId(telegramId);
                        sendMessage(telegramId, deleted ? "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã." : "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                        break;

                    case "/help":
                        sendMessage(telegramId, HELP_TEXT);
                        break;

                    case "/phone":
                        requestPhoneNumber(telegramId);  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞
                        break;

                    case "/personal account":
                        requestPersonalAccount(telegramId);  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞
                        break;

                    case "/meter":
                        sendMessage(telegramId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–¥—ã:");
                        userStates.put(telegramId, "AWAITING_METER_READING");
                        break;

                    default:
                        sendMessage(telegramId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
                        break;
                }
            }
        }
    }

    private void sendMessage(Long telegramId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(telegramId));
        message.setText(textToSend);
        message.setReplyMarkup(getMainKeyboard(telegramId));

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("Error occurred: {}", e.getMessage());

        }
        if (textToSend == null || textToSend.isEmpty()) {
            textToSend = "–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!";
        }

    }

    public void requestPhoneNumber(Long telegramId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(telegramId));
        message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");

        KeyboardButton phoneButton = new KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä");
        phoneButton.setRequestContact(true);  // –í–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞

        KeyboardRow row = new KeyboardRow();
        row.add(phoneButton);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}", e.getMessage());
        }
    }

    private void requestPersonalAccount(Long telegramId) {
        SendMessage message = new SendMessage();
        message.setChatId(telegramId.toString());
//        message.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞");

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
//        KeyboardButton accountButton = new KeyboardButton("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥
        KeyboardRow row = new KeyboardRow();
//        row.add(accountButton);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row));
        keyboardMarkup.setResizeKeyboard(true);      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboardMarkup.setOneTimeKeyboard(false);    // –ï—Å–ª–∏ true, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        keyboardMarkup.setSelective(true);           // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

        message.setReplyMarkup(keyboardMarkup);      // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

        try {
            execute(message);                         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞: {}", e.getMessage());
        }
    }

    public ReplyKeyboardMarkup getMainKeyboard(Long telegramId) {
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("/phone"));

        KeyboardRow row6 = new KeyboardRow();
        row6.add(new KeyboardButton("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞"));

        KeyboardRow row7 = new KeyboardRow();
        row7.add(new KeyboardButton("–í–≤–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
        boolean hasPersonalAccount = userService.hasPersonalAccount(telegramId);

        List<KeyboardRow> keyboardRows = new ArrayList<>(List.of(row1, row6, row7));

        if (hasPersonalAccount) {
            KeyboardRow row2 = new KeyboardRow();
            row2.add(new KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞"));

            KeyboardRow row3 = new KeyboardRow();
            row3.add(new KeyboardButton("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç—è–º –≤–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏—è"));

            KeyboardRow row4 = new KeyboardRow();
            row4.add(new KeyboardButton("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç—è–º –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è"));

            KeyboardRow row5 = new KeyboardRow();
            row5.add(new KeyboardButton("–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã"));

            keyboardRows.addAll(List.of(row2, row3, row4, row5));
        }

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(keyboardRows);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        return keyboardMarkup;

        }

    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}




